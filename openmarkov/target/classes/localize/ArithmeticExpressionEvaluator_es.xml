<?xml version="1.0" encoding="UTF-8"?>
<properties>
<ArithmeticExpressionEvaluator>
  <Title value="Introduzca una expresi贸n"/>
  <Instructions>
 	<Variables value ="Haga doble click para introducir la variable seleccionada en la expresi贸n"/>
	<Functions value ="Haga doble click para introducir una llamada a la funci贸n seleccionada en la expresi贸n"/>
  </Instructions>
  <Functions>
  	<Label value="Funciones"/>
  </Functions>
  <Variables>
  	<Label value="Variables"/>
  </Variables>
  <Help value = "&lt;P&gt;
 This expression evaluator supports mathematical expressions involving numbers, operators and variables. 
 Variables can be referenced by their name, but it is recommended to enclose them in curly braces, i.e. '{' and '}'.
 &lt;br/&gt;
 The following operators are supported:&lt;br&gt;
 &lt;ul&gt;
 &lt;li&gt;( open parentheses&lt;/li&gt;
 &lt;li&gt;) closed parentheses&lt;/li&gt;
 &lt;li&gt;+ addition (for numbers and strings)&lt;/li&gt;
 &lt;li&gt;- subtration&lt;/li&gt;
 &lt;li&gt;* mutliplication&lt;/li&gt;
 &lt;li&gt;/ division&lt;/li&gt;
 &lt;li&gt;% modulus&lt;/li&gt;
 &lt;li&gt;+ unary plus&lt;/li&gt;
 &lt;li&gt;- unary minus&lt;/li&gt;
 &lt;li&gt;= equal (for numbers and strings)&lt;/li&gt;
 &lt;li&gt;!= not equal (for numbers and strings)&lt;/li&gt;
 &lt;li&gt;&lt; less than (for numbers and strings)&lt;/li&gt;
 &lt;li&gt;&lt;= less than or equal (for numbers and strings)&lt;/li&gt;
 &lt;li&gt;&gt; greater than (for numbers and strings)&lt;/li&gt;
 &lt;li&gt;&gt;= greater than or equal (for numbers and strings)&lt;/li&gt;
 &lt;li&gt;&amp;&amp; boolean and&lt;/li&gt;
 &lt;li&gt;|| boolean or&lt;/li&gt;
 &lt;li&gt;! boolean not&lt;/li&gt;
 &lt;/ul&gt;
 The following functions are supported:&lt;br&gt;
 &lt;ul&gt;
 &lt;li&gt;abs&lt;/li&gt;
 &lt;li&gt;acos&lt;/li&gt;
 &lt;li&gt;asin&lt;/li&gt;
 &lt;li&gt;atan&lt;/li&gt;
 &lt;li&gt;atan2&lt;/li&gt;
 &lt;li&gt;ceil&lt;/li&gt;
 &lt;li&gt;cos&lt;/li&gt;
 &lt;li&gt;exp&lt;/li&gt;
 &lt;li&gt;log&lt;/li&gt;
 &lt;li&gt;max&lt;/li&gt;
 &lt;li&gt;min&lt;/li&gt;
 &lt;li&gt;pow&lt;/li&gt;
 &lt;li&gt;round&lt;/li&gt;
 &lt;li&gt;sin&lt;/li&gt;
 &lt;li&gt;sqrt&lt;/li&gt;
 &lt;li&gt;tan&lt;/li&gt;
 &lt;li&gt;toDegrees&lt;/li&gt;
 &lt;li&gt;toRadians&lt;/li&gt;
 &lt;/ul&gt;
 
 Operator precedence:
 &lt;ul&gt;
 &lt;li&gt;+ unary plus, - unary minus, ! boolean not&lt;/li&gt;
 &lt;li&gt;* multiplication, / division, % modulus&lt;/li&gt;
 &lt;li&gt;+ addition, - subtraction&lt;/li&gt;
 &lt;li&gt;&lt; less than, &lt;= less than or equal, &gt; greater than, &gt;= greater than or
 equal&lt;/li&gt;
 &lt;li&gt;= equal, != not equal&lt;/li&gt;
 &lt;li&gt;&amp;&amp; boolean and&lt;/li&gt;
 &lt;li&gt;|| boolean or&lt;/li&gt;
 &lt;/ul&gt;
 Function and variable names can not break any of the following rules:&lt;br&gt;
 &lt;ul&gt;
 &lt;li&gt;can not start with a number&lt;/li&gt;
 &lt;li&gt;can not contain an operator (see the above list of operators)/li&gt;
 &lt;li&gt;can not contain a quote character - single or double/li&gt;
 &lt;li&gt;can not contain a brace character - open or closed/li&gt;
 &lt;li&gt;can not contain one of the following special characters: {, }, ~ , ^ !&lt;/li&gt;
 &lt;/ul&gt;
 
  Notes on expression parsing:
 &lt;ul&gt;
 &lt;li&gt;Spaces are ignored when parsing expressions.&lt;/li&gt;
 &lt;li&gt;The order of precedence used by this class is as follows from highest to
 lowest.&lt;/li&gt;
 &lt;li&gt;The expression is evaluated as one or more subexpressions.
 Subexpressions within open parentheses and closed parentheses are evaluated
 before other parts of the expression.&lt;/li&gt;
 &lt;li&gt;Inner most subexpression are evaluated first working outward.&lt;/li&gt;
 &lt;li&gt;Subexpressions at the same level are evaluated from left to right.&lt;/li&gt;
 &lt;li&gt;When evaluating expressions and subexpressions, operators are evaluated
 with the following precedence listed below.&lt;/li&gt;
 &lt;li&gt;Operators with with the same precedence are evaluated from left to
 right.&lt;/li&gt;
 &lt;li&gt;Once the expression is parsed, Variables are replaced with their values.
 The evaluator has its own internal variable map that it used to resolve
 variable values. All of the variable related methods on the evaluator refer
 to this internal map. You can choose to set you own variable resolver on your
 evaluator instance. IF you do this, then variables resolved by your resolver
 will override any variables in the evaluator's internal variable map.&lt;/li&gt;
 &lt;li&gt;Functions are then executed and replaced with their results. Function
 arguments are each inidividually evaluated as subexpressions that are comma
 separated. This gives you the ability to use nested functions in your
 expressions. You can choose not to evaluate function arguments as expressions
 and instead let the functions handle the arguments themselves. This in effect
 turns off nested expressions, unless you code nexted expression support into
 yours custom functions.&lt;/li&gt;
 &lt;li&gt;Once all variables and functions are resolved, then the parsed
 expression and subexpressions are evaluated according to operator precedence.&lt;/li&gt;
 &lt;/ul&gt;
&lt;P&gt;"/>
  </ArithmeticExpressionEvaluator>
</properties>

